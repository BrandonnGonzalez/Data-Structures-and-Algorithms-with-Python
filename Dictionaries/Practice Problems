
# Problem 5: Restock Inventory
# Write a function restock_inventory() that updates an inventory dictionary based on a restock list. It accepts two parameters:

# current_inventory: a dictionary where each key-value pair represents an item and its current stock in the inventory
# restock_list: a dictionary where each key-value pair represents an item and the quantity to be added to the inventory
# If an item in restock_list is not present in the current_inventory, it should be added. The function should return the updated dictionary current_inventory.

# PLANNING
# 1) Loop through each entry in the restock dictionary
#   a) If the item (key) is already in the inventory, add the new quantity
#   b) If this is a new item, add it to the inventory and set the new quantity
# 2) Return the inventory once all changes have been made 

def restock_inventory(current_inventory, restock_list):
    for items, quantity in restock_list.items():
        if items in current_inventory:
            current_inventory[items] += quantity
        else:
            current_inventory[items] = quantity
    return current_inventory

# Time Complexity: O(n), where n is the number of items in restock_list.
# Space Complexity: O(1), as the function operates in constant space.



# Example input

current_inventory = {
    "apples": 30,
    "bananas": 15,
    "oranges": 10
}

restock_list = {
    "oranges": 20,
    "apples": 10,
    "pears": 5
}

print(restock_inventory(current_inventory, restock_list))
# Example Output:


# current_inventory = {
#     "apples": 40,
#     "bananas": 15,
#     "oranges": 30,
#     "pears": 5
# }





# Problem 6: Calculate GPA
# Write a function calculate_gpa() that calculates the grade point average (GPA) for a student based on their course grades and returns the gpa as a float. The function takes in a dictionary report_card as a parameter where each key-value pair represents a course and the grade received in that course respectively. The grades are represented as strings ("A", "B", "C", "D", "F") and each grade corresponds to a certain number of grade points:

# "A" = 4
# "B" = 3
# "C" = 2
# "D" = 1
# "F" = 0

# A GPA is calculated by finding the average of all grade points.

# def calculate_gpa(report_card):
#     pass
# Example Usage:

# report_card = {"Math": "A", "Science": "C", "History": "A", "Art": "B", "English": "B", "Spanish": "A"}
# print(calculate_gpa(report_card))
# Example Output: 3.33


def calculate_gpa(report_card):
    grade_points = {"A": 4, "B": 3, "C": 2, "D": 1, "F": 0}
    
    if not report_card:
        return 0.0
    
    total_points = 0
    for grade in report_card.values():
        points = grade_points[grade]
        total_points += points
    
    gpa = total_points / len(report_card)
    return round(gpa, 2)
    
    
    # Time Complexity: O(N), N is the number of courses/items in the dictionary
    # Space Complexity: O(1), The function only uses constant space
   
    
# Example Usage:

report_card = {"Math": "A", "Science": "C", "History": "A", "Art": "B", "English": "B", "Spanish": "A"}
print(calculate_gpa(report_card))
# Example Output: 3.33
